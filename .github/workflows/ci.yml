name: ECSA Website CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

env:
  # Farbschema der ECSA Website
  NEXT_PUBLIC_PRIMARY_COLOR: '#9EB953'  # R158 G185 B83
  NEXT_PUBLIC_DARK_COLOR: '#546A29'
  NEXT_PUBLIC_LIGHT_COLOR: '#D9E1C7'
  NEXT_PUBLIC_BG_COLOR: '#F0F5E5'
  NEXT_PUBLIC_TEXT_COLOR: '#4D5E45'

jobs:
  lint:
    name: Qualitätsprüfung
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Node.js einrichten
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      - name: Abhängigkeiten installieren
        run: npm ci
      - name: ESLint-Prüfung ausführen
        run: npm run lint
      - name: Typüberprüfung ausführen
        run: npm run type-check

  test:
    name: Tests ausführen
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - name: Node.js einrichten
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      - name: Abhängigkeiten installieren
        run: npm ci
      - name: Unit-Tests ausführen
        run: npm test
      - name: Test-Abdeckung speichern
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
  
  build:
    name: Build-Prozess
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Node.js einrichten
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      - name: Abhängigkeiten installieren
        run: npm ci
      - name: Website bauen
        run: npm run build
      - name: Build-Artefakte speichern
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: dist/
  
  deploy-staging:
    name: Staging-Deployment
    if: github.ref == 'refs/heads/development'
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: staging
      url: https://staging.ecsa-certificates.eu
    steps:
      - uses: actions/checkout@v3
      - name: Build-Artefakte herunterladen
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: dist
      - name: Auf Staging-Umgebung deployen
        run: |
          echo "Deploying to staging environment..."
          # Hier würde der tatsächliche Deployment-Befehl stehen

  deploy-production:
    name: Produktions-Deployment
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: production
      url: https://ecsa-certificates.eu
    steps:
      - uses: actions/checkout@v3
      - name: Build-Artefakte herunterladen
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: dist
      - name: Auf GitHub Pages deployen
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist